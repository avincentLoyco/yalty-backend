#!/usr/bin/env ruby
require_relative '../config/boot'
require 'optparse'
require 'fileutils'
require 'yaml'
require 'erb'
require 'sidekiq/version'

class SidekiqCtl
  COMMANDS = %w{halt quiet start status stop}

  attr_reader :workers, :logfile, :pidfile, :config_file

  def initialize(argv, stdout=STDOUT, stderr=STDERR)
    @config_file = 'config/sidekiq.yml'
    @config = nil
    @command = nil

    @stdout = stdout
    @stderr = stderr

    @rails_root = File.expand_path('..', __dir__)
    @shutdown_timeout = 30

    opts = OptionParser.new do |o|
      o.banner = "Usage: sidekiqctl -C config/sidekiq.yml (#{COMMANDS.join("|")})"

      o.on '-C', '--config-file PATH', 'Puma config script' do |arg|
        @config_file = arg
      end

      o.on_tail('-H', '--help', 'Show this message') do
        @stdout.puts o
        exit
      end

      o.on_tail('-V', '--version', 'Show version') do
        puts Sidekiq::VERSION
        exit
      end
    end
    opts.order!(argv) { |a| opts.terminate a }

    @command = argv.shift

    @config_file = File.expand_path(@config_file, @rails_root) if @config_file
    if @config_file && File.exist?(@config_file)
      @config = YAML.load(ERB.new(IO.read(@config_file)).result)
      @config = @config.merge(@config.delete(ENV['RAILS_ENV'] || 'development') || {})
      @workers ||= @config[:workers]
      @pidfile ||= File.expand_path(@config[:pidfile], @rails_root)
      @logfile ||= File.expand_path(@config[:logfile], @rails_root)
    else
      raise "Config file not found: #{@config_file}"
    end

    # check present of command
    unless @command
      raise "Available commands: #{COMMANDS.join(", ")}"
    end

    unless COMMANDS.include? @command
      raise "Invalid command: #{@command}"
    end
  rescue => e
    @stdout.puts e.message
    exit 1
  end

  def run
    forks = []

    (workers || 1).times do |index|
      forks << fork do
        start(index) if @command == 'start'
        send_signal(index)
      end
    end

    forks.each { |pid| Process.wait(pid) }
  rescue => e
    message e.message
    exit 1
  end

  private

  def pidfile_for(index)
    pidfile % index
  end

  def pid_for(index)
    File.open(pidfile_for(index)).gets.to_i
  rescue Errno::ENOENT
    nil
  end

  def start(index = 0)
    require 'sidekiq/cli'

    run_args = []
    run_args += ['--daemon']
    run_args += ['--logfile', logfile] if logfile
    run_args += ['--pidfile', pidfile_for(index)] if pidfile
    run_args += ['-C', config_file] if config_file

    sidekiq_cmd = $0.gsub(/sidekiqctl$/, 'sidekiq')
    $0 = sidekiq_cmd if File.exist?(sidekiq_cmd)

    Dir.chdir(@rails_root) do
      cli = Sidekiq::CLI.instance
      cli.parse(run_args)
      cli.run
    end
  end

  def send_signal(index)
    begin
      case @command
      when 'halt'
        Process.kill('QUIT', pid_for(index))

      when 'stop'
        Process.kill('TERM', pid_for(index))
        @shutdown_timeout.times do
          sleep 1 if Process.kill(0, pid_for(index))
        end
        Process.kill('QUIT', pid_for(index))

      when 'quiet'
        Process.kill('USR1', pid_for(index))

      else
        Process.kill(0, pid_for(index))
        message "[#{index}] Sidekiq running."
      end

    rescue Errno::ESRCH
      FileUtils.rm_f(pidfile_for(index))

    rescue SystemCallError, TypeError
      if pid_for(index)
        raise "[#{index}] No pid '#{pid_for(index)}' found"
      else
        message "[#{index}] No pid available"
      end
    end

    message "[#{index}] Command #{@command} sent success"
  end

  def message(msg)
    @stdout.puts msg unless @quiet
  end
end

begin
  cli = SidekiqCtl.new(ARGV.dup)
  cli.run
rescue => e
  STDERR.puts e.message
  exit 1
end
