---
months:
  0:
  - name: good_friday
    regions: [ch_zh, ch_be, ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_bs, ch_bl, ch_sh, ch_ar, ch_ai, ch_sg, ch_gr, ch_ag, ch_tg, ch_ti, ch_vd, ch_ne, ch_ge, ch_ju]
    function: easter(year)
    function_modifier: -2
  - name: easter_monday
    regions: [ch_zh, ch_be, ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_bs, ch_bl, ch_sh, ch_ar, ch_ai, ch_sg, ch_gr, ch_ag, ch_tg, ch_ti, ch_vd, ch_vs, ch_ge, ch_ju]
    function: easter(year)
    function_modifier: 1
    # State holiday but observed in all the states
  - name: ascension_day
    regions: [ch]
    function: easter(year)
    function_modifier: 39
  - name: whit_monday
    regions: [ch_zh, ch_be, ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_bs, ch_bl, ch_sh, ch_ar, ch_ai, ch_sg, ch_gr, ch_ag, ch_tg, ch_ti, ch_vd, ch_vs, ch_ge, ch_ju]
    function: easter(year)
    function_modifier: 50
  - name: corpus_christi
    regions: [ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_zg, ch_fr, ch_so, ch_ai, ch_ag, ch_ti, ch_vs, ch_ne, ch_ju]
    function: easter(year)
    function_modifier: 60
  - name: federal_prayday
    regions: [ch_vd]
    function: ch_vd_lundi_du_jeune_federal(year)
  - name: geneva_prayday
    regions: [ch_ge]
    function: ch_ge_jeune_genevois(year)
  1:
  - name: new_years_day
    regions: [ch_zh, ch_be, ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_bs, ch_bl, ch_sh, ch_ar, ch_ai, ch_sg, ch_gr, ch_ag, ch_tg, ch_vd, ch_vs, ch_ne, ch_ge, ch_ju, ch_ti]
    mday: 1
  - name: saint_berchtold
    regions: [ch_zh, ch_be, ch_lu, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_sh, ch_sg, ch_ag, ch_tg, ch_vd, ch_vs, ch_ne, ch_ju]
    mday: 2
  - name: epiphany
    regions: [ch_ur, ch_sz, ch_ti]
    mday: 6
  3:
  - name: instauration_republic_neuchatel
    regions: [ch_ne]
    mday: 1
  - name: saint_joseph
    regions: [ch_ur, ch_sz, ch_nw, ch_ti, ch_vs]
    mday: 19
  4:
  - name: naefelser_fahrt
    regions: [ch_gl]
    function: ch_gl_naefelser_fahrt(year)
  5:
  - name: labour_day
    regions: [ch_zh, ch_bs, ch_bl, ch_sh, ch_ag, ch_tg, ch_ti, ch_ne, ch_ju]
    mday: 1
  6:
  - name: jura_independance_day
    regions: [ch_ju]
    mday: 23
  - name: sts_peter_and_paul
    regions: [ch_ti]
    mday: 29
  8:
    # Federal holiday
  - name: swiss_national_day
    regions: [ch]
    mday: 1
  - name: assumption_day
    regions: [ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_zg, ch_fr, ch_so, ch_ai, ch_ag, ch_ti, ch_vs, ch_ju]
    mday: 15
  9:
  - name: saint_maurice
    regions: [ch_ai]
    mday: 22
  - name: st_niklaus_von_flue
    regions: [ch_ow]
    mday: 25
  11:
  - name: all_saints_day
    regions: [ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_ai, ch_sg, ch_ag, ch_ti, ch_vs, ch_ju]
    mday: 1
  12:
  - name: immaculate_conception
    regions: [ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_zg, ch_fr, ch_ai, ch_ag, ch_ti, ch_vs]
    mday: 8
    # State holiday but observed in all the states
  - name: christmas
    regions: [ch]
    mday: 25
  - name: st_stephens_day
    regions: [ch_zh, ch_be, ch_lu, ch_ur, ch_sz, ch_ow, ch_nw, ch_gl, ch_zg, ch_fr, ch_so, ch_bs, ch_bl, ch_sh, ch_ar, ch_ai, ch_sg, ch_gr, ch_ag, ch_tg, ch_ti, ch_vs, ch_ne]
    mday: 26
  - name: restoration_republic_geneva
    regions: [ch_ge]
    mday: 31
methods:
  ch_vd_lundi_du_jeune_federal:
    # Monday after the third Sunday of September
    arguments: year
    source: |
      date = Date.civil(year,9,1)
      # Find the first Sunday of September
      until date.wday.eql? 0 do
        date += 1
      end
      # There are 15 days between the first Sunday
      # and the Monday after the third Sunday
      date + 15
  ch_ge_jeune_genevois:
    # Thursday after the first Sunday of September
    arguments: year
    source: |
      date = Date.civil(year,9,1)
      # Find the first Sunday of September
      until date.wday.eql? 0 do
        date += 1
      end
      # Thursday is four days after Sunday
      date + 4
  ch_gl_naefelser_fahrt:
    # First Thursday of April. If the first Thursday of April is in the week before easter, then a week later.
    arguments: year
    source: |
      date = Date.civil(year,4,1)
      # Find the first Thursday of April
      until date.wday.eql? 4 do
        date += 1
      end

      if date.eql?(Holidays::DateCalculatorFactory::Easter::Gregorian.easter_calculator.calculate_easter_for(year)-3)
        date += 7
      end
      date
tests: |
    { Date.civil(2012,8,1) => 'swiss_national_day',
      Date.civil(2012,12,25) => 'christmas',
      Date.civil(2012,05,17) => 'ascension_day'
    }.each do |date, name|
      assert_equal name, (Holidays.on(date, :ch)[0] || {})[:name]
    end

    { Date.civil(2012,8,1) => 'swiss_national_day',
      Date.civil(2012,12,25) => 'christmas',
      Date.civil(2012,05,17) => 'ascension_day',
      Date.civil(2012,5,1) => 'labour_day',
      Date.civil(2012,12,26) => 'st_stephens_day'
    }.each do |date, name|
      assert_equal name, (Holidays.on(date, :ch_zh)[0] || {})[:name]
    end

    [Date.civil(2012,9,17), Date.civil(2013,9,16), Date.civil(2014,9,22)].each do |date|
      assert_equal 'federal_prayday', (Holidays.on(date, :ch_vd)[0] || {})[:name]
    end

    [Date.civil(2012,9,6), Date.civil(2013,9,5), Date.civil(2014,9,11)].each do |date|
      assert_equal 'geneva_prayday', (Holidays.on(date, :ch_ge)[0] || {})[:name]
    end

    [Date.civil(2012,4,12), Date.civil(2013,4,4), Date.civil(2014,4,3)].each do |date|
      assert_equal 'naefelser_fahrt', (Holidays.on(date, :ch_gl)[0] || {})[:name]
    end
