#!/usr/bin/env ruby
require 'travis/pro'
require 'octokit'

#
# Configure
#

if ENV['GITHUB_ACCESS_TOKEN'].nil?
  puts 'GITHUB_ACCESS_TOKEN is not set'
  exit 1
end

begin
  repository = ENV['TRAVIS_REPO_SLUG']
  if ENV['TRAVIS_PULL_REQUEST'] == 'false'
    branch = ENV['TRAVIS_BRANCH']
    sha1 = ENV['TRAVIS_COMMIT']
  else
    branch = ENV['TRAVIS_PULL_REQUEST_BRANCH']
    sha1 = ENV['TRAVIS_PULL_REQUEST_SHA']
  end

  Travis::Pro.github_auth(ENV['GITHUB_ACCESS_TOKEN'])
  travis = Travis::Pro::Repository.find(repository)

  Octokit.configure do |config|
    config.access_token = ENV['GITHUB_ACCESS_TOKEN']
  end
  github = Octokit::Client.new
  github.branch(repository, branch) # validate repository and target branch exists
rescue Travis::Client::NotFound, Octokit::NotFound
  puts "Repository (#{repository}) or branch (#{branch}) not found"
  exit 0
end

#
# Build docker image
#

if ENV['DISABLE_DOCKER_IMAGE'] != 'true' &&
    (
      (
        ENV['TRAVIS_PULL_REQUEST'] == 'false' &&
        (branch == 'mater' || branch =~ %r{^releases?/\d+\.\d+\.\d+(?:\.\d+)?$}i)
      ) || (
        ENV['TRAVIS_PULL_REQUEST'] != 'false' &&
        branch =~ %r{^(?:tasks?|features?|bugs?|fix(?:es)?)/.*?ywa-\d+}i
      )
    )

  target = if ENV['TRAVIS_PULL_REQUEST'] == 'false'
             branch
           else
             ENV['TRAVIS_PULL_REQUEST']
           end

  github.create_status(
    repository, sha1, 'pending',
    context: 'yalty/build', description: 'Docker image build queued'
  )

  travis.session.headers.merge!(
    'Content-Type' => 'application/json',
    'Travis-API-Version' => '3'
  )
  travis.session.raw(
    :post,
    "/repo/#{travis.id}/requests",
    %(
      {
        "request": {
          "branch": "travis-docker-build",
          "message": "#{branch}",
          "config": {
            "env": {
              "YALTY_DOCKER_BUILD": "#{target}",
              "YALTY_DOCKER_BUILD_BRANCH": "#{branch}",
              "YALTY_DOCKER_BUILD_SHA1": "#{sha1}"
            }
          }
        }
      }
    )
  )
  Travis::Pro.session.headers.delete('Content-Type')
  Travis::Pro.session.headers.delete('Travis-API-Version')
end

#
# Restart builds that have a pull request on current branch
#

if ENV['TRAVIS_PULL_REQUEST'] == 'false' && ENV['DISABLE_REBUILD'] != 'true'
  pull_requests = github.pull_requests(repository, state: 'open').select do |pull_request|
    pull_request.base.ref == branch
  end.map(&:number)

  unless pull_requests.empty?
    travis.each_build(event_type: 'pull_request').each do |build|
      next unless pull_requests.include?(build.pull_request_number)

      if build.restartable?
        puts "Build ##{build.number} for pull request ##{build.pull_request_number} restarted"
        build.restart
      end

      pull_requests.delete(build.pull_request_number)
      break if pull_requests.empty?
    end
  end
end
