#!/usr/bin/env ruby
require 'octokit'

#
# Configure
#

if ENV['GITHUB_ACCESS_TOKEN'].nil?
  puts 'GITHUB_ACCESS_TOKEN is not set'
  exit 1
end

begin
  repository = ENV['TRAVIS_REPO_SLUG']
  branch = ENV['TRAVIS_BRANCH']

  Octokit.configure do |config|
    config.access_token = ENV['GITHUB_ACCESS_TOKEN']
  end
  github = Octokit::Client.new
  github.branch(repository, branch) # validate repository and target branch exists
rescue Octokit::NotFound
  puts "Repository (#{repository}) or branch (#{branch}) not found"
  exit 0
end

#
# Build docker image
#

def reset_git_working_tree(ref)
  `git reset --hard #{ref} && git clean -d -x -f -f`
end

def build_docker_image(docker_tag)
  docker_repository = ENV['TRAVIS_REPO_SLUG'].gsub(%r{^yalty/yalty-}, 'yalty/')

  system("docker login -u=\"#{ENV['DOCKER_USERNAME']}\" -p=\"#{ENV['DOCKER_PASSWORD']}\"") &&
    system("./bin/build #{docker_repository}:#{docker_tag}") &&
    system("docker push #{docker_repository}:#{docker_tag}")
end

if ENV['TRAVIS_PULL_REQUEST'] != 'false' && ENV['TRAVIS_BRANCH'] == 'master'
  if ENV['TRAVIS_PULL_REQUEST_BRANCH'] =~ %r{^[^/]+/(ywa-[[:digit:]]+)}i
    docker_tag = Regexp.last_match(1).downcase
    reset_git_working_tree('HEAD')
    result = build_docker_image(docker_tag)
    github.create_status(
      repository, ENV['TRAVIS_PULL_REQUEST_SHA'], result ? 'success' : 'failure',
      context: 'yalty/build', description: 'Docker image builded',
      target_url: "http://sample.#{docker_tag}.review.yaltyapp.com"
    )
  elsif ENV['TRAVIS_PULL_REQUEST_BRANCH'] =~ %r{^releases?/(.+)}
    docker_tag = "#{Regexp.last_match(1)}-rc-#{ENV['TRAVIS_PULL_REQUEST_SHA']}"
    reset_git_working_tree(ENV['TRAVIS_PULL_REQUEST_SHA'])
    result = build_docker_image(docker_tag)
    github.create_status(
      repository, ENV['TRAVIS_PULL_REQUEST_SHA'], result ? 'success' : 'failure',
      context: 'yalty/build', description: 'Docker image builded'
    )
  end
elsif ENV['TRAVIS_BRANCH'] == 'master'
  reset_git_working_tree('master')
  build_docker_image('latest')
end
